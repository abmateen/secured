 /* The Main program File  * Everything starts from here this is the main program *  * Author : Abdul Mateen (abmateen@gmail.com) * */#include <stdio.h>#include <stdlib.h>#include <sys/types.h>#include <sys/stat.h>#include <unistd.h>#include <fcntl.h>#include <errno.h>#include <string.h>#include "emailit.h"#include <pthread.h>#include <signal.h>/* Custom includes */#include "df.h"#include "process.h"#include "pidof.h"/* Tags Declearations */char *mailprogram;char *mailparameters;char *process_list;char *process[256];char *notfile;char *server;/* Process queue */PROCESS_QUEUE* implqueue;void print_usage(){    printf("Usage: secureatc -f [config file]\n");    printf	("If no config file is given then it will read /etc/secureatc.conf\n");    printf	("You should read the manual how to write a config file for secureatc\n");}/* Read the main config file */int read_conf_file(char *name){        FILE *file = fopen(name, "r");    //char data[BUFSIZ];    char *data = (char *) malloc(100);    unsigned int filedata;    char *tag = (char *) malloc(100);    char *value = (char *) malloc(100);    /* tags values stored in */    mailprogram = (char*) calloc(100,sizeof(char));    mailparameters = (char*) calloc(200,sizeof(char));    process_list = (char *) calloc(100,sizeof(char));        notfile = (char*) calloc(50,sizeof(char));    server = (char*) calloc(100,sizeof(char));    int limit = 0;        while ( ( limit = fscanf(file,"%[^\n]\n",data)) != EOF ){	    	    if ( data[0] == '#' ) continue; // Ignore comments 		    /* Spliting data into some useful tag value pair */	    sscanf(data,"%s %[^\n]\n",tag,value);	    	    /* using strcpy to copy tag values into variables */	    /* strcpy copy data instead of assignment of addresses */	    	    if ( (strstr(tag, "server")) != NULL ){	      	      strcpy(server, value);	      printf("%s\n",server);	    	    }	    	    	 	    if ( (strstr( tag, "mailprogram")) != NULL ){		    		    strcpy(mailprogram, value);		    printf("%s\n",mailprogram);		    	    }	    	    if ( (strstr(tag, "mailparamters")) != NULL){		    		    strcpy(mailparameters, value);		    printf("%s\n",mailparameters);	    }	    	    if ( (strstr(tag, "process" )) != NULL){		   		    strcpy(process_list, value);		    printf("%s\n",process_list);		    /* Split the process_list with ' ' */		    int index = 0;		    process[index++] = strtok(process_list, ",");		    while ( (process[index] = strtok(NULL,",")) != NULL ){		      		      index++;		    }		    	    }	    if ( (strstr(tag, "diskreportfile")) != NULL){	    	      strcpy(notfile, value);	    }           }            generate_disk_report();        //fclose(file);    //close(fd);}/* This will init a daemon for secureatcd */void init_daemon(){  pid_t pid,sid;  struct sigaction sa;  umask(0);  pid = fork();  if ( pid < 0 ) {    perror("Error:Daemon failed");    exit(1);  }  if ( pid != 0 ) // parent    exit(0);  sid = setsid();     /*      * Ensure future opens won't allocate controlling TTYs.      */     sa.sa_handler = SIG_IGN;     sigemptyset(&sa.sa_mask);     sa.sa_flags = 0;     if (sigaction(SIGHUP, &sa, NULL) < 0)       fprintf(stderr,"Error in Sigaction");     if ((pid = fork()) < 0)       fprintf(stderr,"Error in fork");     else if (pid != 0) /* parent */         exit(0);           chroot("/");}void* run_daemon(){        while ( 1 ){       monitor_queue(implqueue);    sleep(5);     }  return;}int main(int argc, char **argv){    pthread_t daemon_process_thread;      if ( getuid() != 0 ){ // If not root do exit    printf("Sorry , you must be root to run it\n");    exit(1);  }        if (argc < 2) {	printf("Reading the default config file : /etc/secureatc.conf\n");	read_conf_file("/etc/secureatc.conf");    }    if (argc >= 2) {	if ((strcmp(argv[1], "-f")) == 0) {	    printf("Reading specified config file : %s\n", argv[2]);	    read_conf_file(argv[2]);	// read given conf file	    // email_it(notfile);	}	if ((strcmp(argv[1], "-h")) == 0) {	    print_usage();	    exit(0);	}    }     //  main_process(2,"this");       init_daemon();    /* Getting the process queue */        implqueue = init_process_queue();        run_daemon(implqueue);    //int error = pthread_create(&daemon_process_thread, NULL, &run_daemon, NULL);        //pthread_join(daemon_process_thread, NULL);        // printf("%d",error);}